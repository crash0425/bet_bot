predictor.py
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from joblib import dump, load
import schedule
import time

# --- Dummy Data Generator (for testing purposes only) ---
def generate_dummy_data():
    np.random.seed(42)
    data = pd.DataFrame({
        'home_team_win_pct': np.random.rand(100),
        'away_team_win_pct': np.random.rand(100),
        'home_pitcher_era': np.random.rand(100) * 5,
        'away_pitcher_era': np.random.rand(100) * 5,
        'home_team_win': np.random.randint(0, 2, 100)
    })
    return data

# --- Train Model ---
def train_model():
    data = generate_dummy_data()
    X = data.drop('home_team_win', axis=1)
    y = data['home_team_win']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    y_pred = model.predict(X_test)
    print("Model Accuracy:", accuracy_score(y_test, y_pred))

    dump(model, 'model.pkl')

# --- Predict Today's Games (dummy logic) ---
def predict_games():
    try:
        model = load('model.pkl')
    except:
        print("Model not found. Training now.")
        train_model()
        model = load('model.pkl')

    today_games = pd.DataFrame({
        'home_team_win_pct': [0.6, 0.4],
        'away_team_win_pct': [0.5, 0.7],
        'home_pitcher_era': [3.2, 4.1],
        'away_pitcher_era': [4.0, 3.5]
    })

    predictions = model.predict(today_games)
    print("Predicted Outcomes:", predictions)
    return predictions

# --- Scheduler to run daily ---
def job():
    print("Running MLB predictions...")
    predict_games()

schedule.every().day.at("10:00").do(job)

if __name__ == "__main__":
    print("Scheduler started. Running daily job at 10:00 AM.")
    while True:
        schedule.run_pending()
        time.sleep(60)
